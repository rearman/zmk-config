/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define AS(keycode) &as LS(keycode) keycode //Autoshift Macro

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

&sk {
    release-after-ms = <200>;
    quick-release;
};

/ {
	behaviors {
		  hm: homerow_mods {
		      compatible = "zmk,behavior-hold-tap";
		      label = "HOMEROW_MODS";
		      #binding-cells = <2>;
		      tapping_term_ms = <200>;
		      quick_tap_ms = <0>;
		      flavor = "tap-preferred";
		      bindings = <&kp>, <&kp>;
		      };
		  as: auto_shift {
		      compatible = "zmk,behavior-hold-tap";
		      label = "AUTO_SHIFT";
		      #binding-cells = <2>;
		      tapping_term_ms = <120>;
		      quick_tap_ms = <0>;
		      flavor = "tap-preferred";
		      bindings = <&kp>, <&kp>;
		      };

		  };
	keymap {
		compatible = "zmk,keymap";

		default_layer {
// .-----------------------------------.     .-----------------------------------.
// | ESC |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U  |  I  |  O  |  P  |  -  |
// |-----+-----+-----+-----+-----+-----|     |-----+-----+-----+-----+-----+-----|
// |  =  |  A  |  S  |  D  |  F  |  G  |     |  H  |  J  |  K  |  L  |  ;  |  '  |
// |-----+-----+-----+-----+-----+-----|     |-----+-----+-----+-----+-----+-----|
// |  `  |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M  |  ,  |  .  |  /  |  \  |
// '-----------------+-----+-----+-----|     |-----+-----+-----+-----------------'
//                   | TAB | LWR | BKS |     | SPC | RSE | RET |
//		     '-----------------'     '-----------------'
			bindings = <
   &kp ESC    AS(Q) AS(W) AS(E)   AS(R) AS(T)         AS(Y)          AS(U) AS(I)     AS(O)   AS(P)    AS (MINUS)
   AS (EQUAL)  AS(A) AS(S) AS(D)   AS(F) AS(G)         AS(H)          AS(J) AS(K)     AS(L)   AS(SEMI) AS (SQT)
   AS(GRAVE)       AS(Z) AS(X) AS(C)   AS(V) AS(B)         AS(N)          AS(M) AS(COMMA) AS(DOT) AS(FSLH) AS(BSLH)
			       &hm LALT TAB &mo 1 &hm LCTL BSPC &hm RCTL SPACE &mo 2 &hm RALT RET
			>;
		};

		lower_layer {
// .-----------------------------------.     .-----------------------------------.
// |     | F01 | F02 | F03 | F04 |     |     |     |  7  |  8  |  9  |  [  |     |
// |-----+-----+-----+-----+-----+-----|     |-----+-----+-----+-----+-----+-----|
// |     | F05 | F06 | F07 | F08 |     |     |     |  4  |  5  |  6  |  ]  |     |
// |-----+-----+-----+-----+-----+-----|     |-----+-----+-----+-----+-----+-----|
// | SFT | F09 | F10 | F11 | F12 |     |     |     |  1  |  2  |  3  |     | SFT |
// '-----------------+-----+-----+-----|     |-----+-----+-----+-----------------'
//                   |     | LWR |     |     |     |  0  |  .  |
//		     '-----------------'     '-----------------'
			bindings = <
   &trans AS(F1) AS(F2)  AS(F3)  AS(F4)  &none  &none  AS(7) AS(8)   AS(9) AS(LBKT) &trans
   &trans AS(F5) AS(F6)  AS(F7)  AS(F8)  &none  &none  AS(4) AS(5)   AS(6) AS(RBKT) &trans
   &sk LSFT AS(F9) AS(F10) AS(F11) AS(F12) &none  &none  AS(1) AS(2)   AS(3) &none    &sk RSFT
			 &trans  &trans  &trans &trans AS(0) AS(DOT)
			>;

		};

		raise_layer {
// .-----------------------------------.     .-----------------------------------.
// |     |     | GUI |     |     |     |     |     | HOM |  U  | PUP | PSC |     |
// |-----+-----+-----+-----+-----+-----|     |-----+-----+-----+-----+-----+-----|
// |     | APP | INS |     |     |     |     |     |  L  |     |  R  |     |     |
// |-----+-----+-----+-----+-----+-----|     |-----+-----+-----+-----+-----+-----|
// | SFT |     |     | CAP |     |     |     |     | END |  D  | PDN |     | SFT |
// '-----------------+-----+-----+-----|     |-----+-----+-----+-----------------'
//                   |     |     | DEL |     |     | RSE |     |
//		     '-----------------'     '-----------------'
			bindings = <
   &trans &none     AS(LGUI) &none    &none  &none   &none  AS(HOME) AS(UP)   AS(PG_UP) &kp PSCRN &trans
   &trans &kp K_APP AS(INS)  &none    &none  &none   &none  AS(LEFT) &none    AS(RIGHT) &none     &trans
   &sk LSFT &none     &none    &kp CAPS &none  &none   &none  AS(END)  AS(DOWN) AS(PG_DN) &none     &sk RSFT
			     &trans   &trans AS(DEL) &trans &trans   &trans
			>;

		};
	};
};
